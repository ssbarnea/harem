#!/usr/bin/env ansible-playbook
---
- hosts: cengine
  become: true
  vars:
    app:
      name: portainer
  tasks:
    - name: create app user
      user:
        name: "{{ app.name }}"
        home: /opt/data/{{ app.name }}/
      register: user

    - name: service folder
      file:
        path: /opt/data/{{ app.name }}/
        owner: "{{ app.name }}"
        group: "{{ app.name }}"
        state: directory
        mode: "0700"

    - name: deploy config
      copy:
        src: "{{ item }}"
        dest: /opt/data/{{ app.name }}/{{ item }}
        group: "{{ app.name }}"
        owner: "{{ app.name }}"
      register: cfg
      loop:
        - docker-compose.yml

    - name: install docker-compose
      pip:
        name: docker-compose
        state: present

    - block:
        - name: compose down
          docker_compose:
            project_name: "{{ app.name }}"
            project_src: /opt/data/{{ app.name }}/
            state: absent

        - name: compose up
          docker_compose:
            build: true
            debug: true
            pull: true
            # recreate: always
            restarted: true
            project_name: "{{ app.name }}"
            remove_orphans: true
            project_src: /opt/data/{{ app.name }}/
          register: result

        # - name: get info about container
        #   docker_container_info:
        #     name: "{{ app.name }}"
        #   register: result2
        #   failed_when: not result.container.State.Running
        #   retries: 3
        #   delay: 5

      rescue:
        - name: print debug info
          debug: var=result

        # - name: display docker logs
        #   shell: |
        #     docker logs {{ app.name }}
        #   register: result

        - name: compose down
          docker_compose:
            project_name: "{{ app.name }}"
            project_src: /opt/data/{{ app.name }}/
            state: absent

        - name: assure we fail the playbook
          fail:
            msg: |
              "{{ result.stderr_lines | join('\\n') }}"
              "{{ result.stdout_lines | join('\\n') }}"

    # - debug: var=result
