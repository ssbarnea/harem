#!/usr/bin/env ansible-playbook
# %YAML 1.2
---
- hosts: n0,buntu # baremetals
  gather_facts: false
  tasks:
    - name: Remove system docker if needed
      package:
        name:
          - docker
          - docker-common
        state: absent
      become: true

    - include_role:
        name: ensure-docker-plus

    - name: Detect localhost ssh keys
      command: ssh-keyscan localhost
      register: localhost_keys
      changed_when: false

    - name: Grab root pub key
      become: true
      slurp:
        src: ~/.ssh/id_rsa.pub
      register: my_key

    - name: Assure we trust outselves
      become: true
      authorized_key:
        user: root # ansible_user_id woun't not be root with become!
        state: present
        key: "{{ my_key.content | b64decode }}"

    # to avoid docker remoting issues, especially with paramiko
    - name: assure localhost is in known_hosts
      become: true
      known_hosts:
        key: "{{ item }}"
        name: localhost
        state: present
      with_items: "{{ localhost_keys.stdout_lines }}"

    - name: Perform ipv4 validations
      become: true
      shell:
        cmd: |
          {{ item }}
        executable: /bin/bash # for pipefail
        warn: false
      with_items:
        - ping -4 -c2 google.com
        - docker ps
        - DOCKER_HOST=ssh://root@localhost docker ps
        - docker run --network=host -t busybox ping -4 -c2 google.com
        - docker run -t busybox ping -4 -c2 google.com
        - docker run -t busybox wget -q -O /dev/null http://v4.ipv6-test.com/api/myip.php\?json
      changed_when: false

    - name: Perform ipv6 validations
      become: true
      vars:
        network: bridge6
      shell:
        cmd: |
          {{ item }}
        executable: /bin/bash # for pipefail
        warn: false
      with_items:
        - ping -6 -c2 google.com
        - docker ps
        - DOCKER_HOST=ssh://root@localhost docker ps
        - docker run --network={{ network }} -t busybox ping -6 -c2 google.com
        - docker run --network={{ network }} -t busybox ping -6 -c2 google.com
        - docker run --network={{ network }} -t busybox wget -q -O /dev/null http://v6.ipv6-test.com/api/myip.php\?json
        - docker run --network={{ network }} -t busybox wget -q -O /dev/null http://v4v6.ipv6-test.com/api/myip.php\?json
      changed_when: false
# while DNS and ICMP(ping) can pass in a container, on centos-8 web access may
# not. WE MUST TEST 80/443

# # Masquerading allows for docker ingress and egress (this is the juicy bit)
# firewall-cmd --zone=public --add-masquerade --permanent

# # Specifically allow incoming traffic on port 80/443 (nothing new here)
# firewall-cmd --zone=public --add-port=80/tcp
# firewall-cmd --zone=public --add-port=443/tcp

# # Reload firewall to apply permanent rules
# firewall-cmd --reload
# https://serverfault.com/questions/987686/no-network-connectivity-to-from-docker-ce-container-on-centos-8

# ipv6 joy https://github.com/moby/moby/issues/20559

# ip -6 route show
# ::1 dev lo proto kernel metric 256 pref medium
# 2a02:8010:61a9:33::201 dev enp1s0 proto kernel metric 100 pref medium
# 2a02:8010:61a9::/48 dev enp1s0 proto ra metric 100 pref medium
# fe80::/64 dev enp1s0 proto kernel metric 100 pref medium
# fe80::/64 dev vethb21ad52 proto kernel metric 256 pref medium
# fe80::/64 dev docker0 proto kernel metric 256 pref medium
# fe80::/64 dev br-055f556fc48b proto kernel metric 256 linkdown pref medium
# fe80::/64 dev vethf116c5d proto kernel metric 256 pref medium
# fe80::/64 dev veth04ebc7e proto kernel metric 256 pref medium
# fe80::/64 dev veth2899db8 proto kernel metric 256 pref medium
# default via fe80::20e:c4ff:fed2:aa5d dev enp1s0 proto ra metric 100 pref medium
