#!/usr/bin/env ansible-playbook
---
- hosts: n0
  become: true
  vars:
    gid: 1000
    uid: 1000
    # owner: nobody
    # group: nobody
    service_name: rp
  tasks:
    - name: service folder
      file:
        path: /opt/data/{{ service_name }}/
        owner: "{{ gid }}"
        group: "{{ uid }}"
        state: directory
        # mode: "0700"

        # recurse: true
    - name: service folder
      file:
        path: /opt/data/{{ service_name }}/consul
        owner: "100"
        group: "1000"
        state: directory
        # mode: "0700"

    - name: vm
      sysctl:
        name: vm.max_map_count
        value: "262144"
        sysctl_file: /etc/sysctl.d/99-sysctl.conf
        sysctl_set: true

    - block:
        - name: compose up
          docker_compose:
            build: true
            debug: true
            pull: true
            recreate: always
            restarted: true
            project_name: "{{ service_name }}"
            definition:
              version: "2"
              services:
                mongodb:
                  image: mongo:3.4
                  volumes:
                    - /opt/data/{{ service_name }}/mongo:/data/db
                  restart: always
                registry:
                  image: consul:1.0.6
                  volumes:
                    - /opt/data/{{ service_name }}/consul:/consul/data
                  command: agent -server -bootstrap-expect=1 -ui -client 0.0.0.0
                  environment:
                    - 'CONSUL_LOCAL_CONFIG={"leave_on_terminate": true}'
                  restart: always
                uat:
                  image: reportportal/service-authorization:4.2.0
                  depends_on:
                    - mongodb
                  environment:
                    - RP_PROFILES=docker
                    - RP_SESSION_LIVE=86400
                  restart: always
                gateway:
                  image: traefik:1.6.6
                  ports:
                    - 8080:8080
                  command:
                    - --consulcatalog.endpoint=registry:8500
                    - --defaultEntryPoints=http
                    - --entryPoints=Name:http Address::8080
                    - --web
                    - --web.address=:8081
                  restart: always
                index:
                  image: reportportal/service-index:4.2.0
                  environment:
                    - RP_SERVER_PORT=8080
                    - RP_PROXY_CONSUL=true
                  depends_on:
                    - registry
                    - gateway
                  restart: always
                api:
                  image: reportportal/service-api:4.3.0
                  depends_on:
                    - mongodb
                  environment:
                    - RP_PROFILES=docker
                    - JAVA_OPTS=-Xmx1g -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/tmp
                  restart: always
                ui:
                  image: reportportal/service-ui:4.3.0
                  environment:
                    - RP_SERVER.PORT=8080
                    - RP_CONSUL.TAGS=urlprefix-/ui opts strip=/ui
                    - RP_CONSUL.ADDRESS=registry:8500
                  restart: always
                analyzer:
                  image: reportportal/service-analyzer:4.3.0
                  depends_on:
                    - registry
                    - gateway
                    - elasticsearch
                  restart: always
                elasticsearch:
                  image: docker.elastic.co/elasticsearch/elasticsearch-oss:6.1.1
                  restart: always
                  volumes:
                    - /opt/data/{{ service_name }}/elasticsearch:/usr/share/elasticsearch/data
                  environment:
                    - bootstrap.memory_lock=true
                  ulimits:
                    memlock:
                      soft: -1
                      hard: -1
                    nofile:
                      soft: 65536
                      hard: 65536
                # jira:
                #   image: 'reportportal/service-jira:4.3.0'
                #   environment:
                #     - RP_PROFILES=docker
                #   restart: always
                # rally:
                #   image: 'reportportal/service-rally:4.3.0'
                #   environment:
                #     - RP_PROFILES=docker
                #   restart: always

          register: result

        - name: gather container info
          docker_container_info:
            name: "{{ service_name }}"
          register: result
          failed_when: not result.container.State.Running
          retries: 3
          delay: 5

      rescue:
        - name: display logs
          command: docker logs {{ service_name }}
          args:
            warn: false
          register: result

        - name: fail the playbook
          fail: msg="{{ result }}"
